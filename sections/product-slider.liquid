  <section class={{ section.id }}>
    <div class="wrapper">
      <i id="left">&#10096;</i>
      <ul class="carousel">

      {% comment %} If no selected collection {% endcomment %}
        {% if section.settings.featured-collection == blank %}
          {% comment %} product placeholder 1 {% endcomment %}
          <li class="card">
            <div class="img">{{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}</div>
            <div class="card-body">
              <h2>Product Sample</h2>
              <span>₱15.99</span>
            </div>
          </li>
          {% comment %} product placeholder 2 {% endcomment %}
          <li class="card">
            <div class="img">{{ 'product-2' | placeholder_svg_tag: 'placeholder-svg' }}</div>
            <div class="card-body">
              <h2>Product Sample</h2>
              <span>₱15.99</span>
            </div>
          </li>
          {% comment %} product placeholder 3 {% endcomment %}
          <li class="card">
            <div class="img">{{ 'product-3' | placeholder_svg_tag: 'placeholder-svg' }}</div>
            <div class="card-body">
              <h2>Product Sample</h2>
              <span>₱15.99</span>
            </div>
          </li>
          {% comment %} product placeholder 4 {% endcomment %}
          <li class="card">
            <div class="img">{{ 'product-4' | placeholder_svg_tag: 'placeholder-svg' }}</div>
            <div class="card-body">
              <h2>Product Sample</h2>
              <span>₱15.99</span>
            </div>
          {% comment %} product placeholder 5 {% endcomment %}
          <li class="card">
            <div class="img">{{ 'product-5' | placeholder_svg_tag: 'placeholder-svg' }}</div>
            <div class="card-body">
              <h2>Product Sample</h2>
              <span>₱15.99</span>
            </div>
          </li>
          {% comment %} product placeholder 6 {% endcomment %}
          <li class="card">
            <div class="img">{{ 'product-6' | placeholder_svg_tag: 'placeholder-svg' }}</div>
            <div class="card-body">
              <h2>Product Sample</h2>
              <span>₱15.99</span>
            </div>
        {% else %}
          {% comment %} If collection is selected {% endcomment %}
          {% for product in collections[section.settings['featured-collection']].products %}
            {% assign image = product.featured_media.preview_image %}
            <li class="card">
              <div class="img"><img src="{{ image | img_url: 'large' }}" alt="img" draggable="false"></div>
              <div class="card-body">
                <h2>{{ product.title }}</h2>
                <span>{{ product.price | money }}</span>
              </div>
            </li>
          {% endfor%}
        {% endif %}
        
      </ul>
      <i id="right">&#10097;</i>
    </div>
  </section>


{% style %}
  .{{ section.id }} {
    background: {{ section.settings.section_background_color }};
    width: 100%;
    max-width: 1920px;
  }

  .wrapper {
    max-width: {{ section.settings.section_width }}vw;
    width: 100%;
    height: 100%;
    position: relative;
    margin: 0 auto;
    padding: {{ section.settings.section_padding_y }}px 0;
  }

  .wrapper i {
    font-style: normal;
    font-weight: bold;
    top: 50%;
    height: 50px;
    width: 50px;
    cursor: pointer;
    font-size: 1.25rem;
    position: absolute;
    text-align: center;
    line-height: 50px;
    background: #fff;
    border-radius: 50%;
    box-shadow: 0 3px 6px rgba(0,0,0,0.23);
    transform: translateY(-50%);
    transition: transform 0.1s linear;
  }
  .wrapper i:active{
    transform: translateY(-50%) scale(0.85);
  }
  .wrapper i:first-child{
    left: -22px;
  }
  .wrapper i:last-child{
    right: -22px;
  }

  .wrapper .carousel{
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: calc((100% / 4) - 12px);
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    gap: 16px;
    border-radius: 0px;
    scroll-behavior: smooth;
    scrollbar-width: none;
    padding: 10px 0;
  }

  .carousel::-webkit-scrollbar {
    display: none;
  }
  .carousel.no-transition {
    scroll-behavior: auto;
  }
  .carousel.dragging {
    scroll-snap-type: none;
    scroll-behavior: auto;
  }
  .carousel.dragging .card {
    cursor: grab;
    user-select: none;
  }
  .carousel :where(.card, .img) {
    display: flex;
    justify-content: center;
    align-items: left;
  }

  .carousel .card {
    scroll-snap-align: start;
    list-style: none;
    background: {{ section.settings.card_body_color }};
    cursor: pointer;
    flex-direction: column;
    border-radius: {{ section.settings.cards_border_radius }}px;
    width: calc((60vw / 4) -40 );
    overflow: hidden;
    transition: background .15s ease-in-out;
  }

  .carousel .card:hover {
    background: #f5f5f5;
  }
  
  {% if section.settings.show_border == true %}
    .carousel .card {
      border: 1px solid {{ section.settings.card_border_color }};
    }
  {% endif %}

  {% if section.settings.show_shadow == true %}
    .carousel .card {
      box-shadow: 0 0 8px #ccc;
    }
  {% endif %}

  .carousel .card .img {
    width: 100%;
  }

  .card .img img {
    width: 100%;
    object-fit: cover;
  }

  .carousel .card-body {
    width: 100%;
    height: 100%;
    padding: 16px;
  }

  .carousel .card h2 {
    font-weight: 400;
    font-size: {{ section.settings.title_font_size }}px;
    color: {{ section.settings.title_font_color }};
    padding: 0;
  }

  .carousel .card span {
    color: {{ section.settings.price_font_color }};
    font-size: {{ section.settings.price_font_size }}px;
  }

  @media screen and (max-width: 900px) {
    .wrapper .carousel {
      grid-auto-columns: calc((100% / 2) - 9px);
    }
  }

  @media screen and (max-width: 600px) {
    .wrapper- .carousel {
      grid-auto-columns: 100%;
    }
  }
{% endstyle %}


{% schema %}
  {
    "name": "Product Auto Slider",
    "class": "collection",
    "limit": 1,
    "settings": [
      {
        "type": "collection",
        "id": "featured-collection",
        "label": "Collection (Even number of products is recommended)"
      },
      {
        "type": "range",
        "id": "section_width",
        "min": 30,
        "max": 100,
        "step": 1,
        "unit": "vw",
        "label": "Section Width",
        "default": 60
      },
      {
        "type": "range",
        "id": "section_padding_y",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "label": "Section Padding Y",
        "default": 40
      },
      {
        "type": "range",
        "id": "title_font_size",
        "min": 12,
        "max": 64,
        "step": 1,
        "unit": "px",
        "label": "Title Font Size",
        "default": 16
      },
      {
        "type": "range",
        "id": "price_font_size",
        "min": 12,
        "max": 64,
        "step": 1,
        "unit": "px",
        "label": "Price Font Size",
        "default": 14
      },
      {
        "type": "range",
        "id": "cards_border_radius",
        "min": 0,
        "max": 50,
        "step": 1,
        "unit": "px",
        "label": "Card Border Radius",
        "default": 0
      },
      {
        "type": "color",
        "id": "section_background_color",
        "label": "Section Background Color",
        "default": "#fff"
      },
      {
        "type": "color",
        "id": "title_font_color",
        "label": "Title Font Color",
        "default": "#000"
      },
      {
        "type": "color",
        "id": "price_font_color",
        "label": "Price Font Color",
        "default": "#000"
      },
      {
        "type": "color",
        "id": "card_body_color",
        "label": "Card Body Color",
        "default": "#fff"
      },
      {
        "type": "color",
        "id": "card_border_color",
        "label": "Card Border Color",
        "default": "#ccc"
      },
      {
        "type": "checkbox",
        "id": "show_border",
        "label": "Show Card Border",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "show_shadow",
        "label": "Show Card Shadow",
        "default": false
      }
    ],
    "presets": [
      {
        "category": "Collection",
        "name": "Product Auto Slider"
      }
    ]
  }
{% endschema %}

<script>

  const wrapper = document.querySelector(".wrapper");
  const carousel = document.querySelector(".carousel");
  const firstCardWidth = carousel.querySelector(".card").offsetWidth;
  const arrowBtns = document.querySelectorAll(".wrapper i");
  const carouselChildrens = [...carousel.children];


  let isDragging = false, isAutoPlay = true, startX, startScrollLeft, timeoutId;

  // Get the number of cards that can fit in the carousel at once
  let cardPerView = Math.round(carousel.offsetWidth / firstCardWidth);

  // Insert copies of the last few cards to beginning of carousel for infinite scrolling
  carouselChildrens.slice(-cardPerView).reverse().forEach(card => {
      carousel.insertAdjacentHTML("afterbegin", card.outerHTML);
  });

  // Insert copies of the first few cards to end of carousel for infinite scrolling
  carouselChildrens.slice(0, cardPerView).forEach(card => {
      carousel.insertAdjacentHTML("beforeend", card.outerHTML);
  });

  // Scroll the carousel at appropriate postition to hide first few duplicate cards on Firefox
  carousel.classList.add("no-transition");
  carousel.scrollLeft = carousel.offsetWidth;
  carousel.classList.remove("no-transition");

  // Add event listeners for the arrow buttons to scroll the carousel left and right
  arrowBtns.forEach(btn => {
      btn.addEventListener("click", () => {
          carousel.scrollLeft += btn.id == "left" ? -firstCardWidth : firstCardWidth;
      });
  });

  const dragStart = (e) => {
      isDragging = true;
      carousel.classList.add("dragging");
      // Records the initial cursor and scroll position of the carousel
      startX = e.pageX;
      startScrollLeft = carousel.scrollLeft;
  }

  const dragging = (e) => {
      if(!isDragging) return; // if isDragging is false return from here
      // Updates the scroll position of the carousel based on the cursor movement
      carousel.scrollLeft = startScrollLeft - (e.pageX - startX);
  }

  const dragStop = () => {
      isDragging = false;
      carousel.classList.remove("dragging");
  }

  const infiniteScroll = () => {
      // If the carousel is at the beginning, scroll to the end
      if(carousel.scrollLeft === 0) {
          carousel.classList.add("no-transition");
          carousel.scrollLeft = carousel.scrollWidth - (2 * carousel.offsetWidth);
          carousel.classList.remove("no-transition");
      }
      // If the carousel is at the end, scroll to the beginning
      else if(Math.ceil(carousel.scrollLeft) === carousel.scrollWidth - carousel.offsetWidth) {
          carousel.classList.add("no-transition");
          carousel.scrollLeft = carousel.offsetWidth;
          carousel.classList.remove("no-transition");
      }

      // Clear existing timeout & start autoplay if mouse is not hovering over carousel
      clearTimeout(timeoutId);
      if(!wrapper.matches(":hover")) autoPlay();
  }

  const autoPlay = () => {
      if(window.innerWidth < 800 || !isAutoPlay) return; // Return if window is smaller than 800 or isAutoPlay is false
      // Autoplay the carousel after every 2500 ms
      timeoutId = setTimeout(() => carousel.scrollLeft += firstCardWidth, 2500);
  }
  autoPlay();

  carousel.addEventListener("mousedown", dragStart);
  carousel.addEventListener("mousemove", dragging);
  document.addEventListener("mouseup", dragStop);
  carousel.addEventListener("scroll", infiniteScroll);
  wrapper.addEventListener("mouseenter", () => clearTimeout(timeoutId));
  wrapper.addEventListener("mouseleave", autoPlay);
</script>